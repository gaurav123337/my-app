{"version":3,"sources":["Component/utility/utility.js","history.js","Component/Login/Login.js","Component/Login/index.js","Component/Search/index.js","Component/Search/Search.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","splitUrl","URL","y","split","console","log","length","getAllStarwarsValue","dataVal","then","response","data","results","count","numberOfPagesLeft","Math","ceil","promises","i","push","Promise","all","reduce","acc","key","localStorage","setItem","JSON","stringify","catch","error","history","Login","login","e","state","uname","pwd","parse","getItem","some","currVal","name","birth_year","redirectToSearch","change","setState","target","value","className","type","placeholder","onChange","onClick","this","Component","Search","props","search","planets","re","RegExp","allSearch","filter","planet","index","match","allPlanet","getDetail","renderDes","detailItem","html","item","details","style","textAlign","id","map","href","fontWeight","parseInt","population","margin","dangerouslySetInnerHTML","__html","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e476c5d4.chunk.js","sourcesContent":["const axios = require(\"axios\");\r\n\r\nexport function showDetail(data, URL) {\r\n  for (let i = 0; i < data.results.length; i++) {\r\n    console.log(data.results[i]);\r\n  }\r\n  let key = splitUrl(URL);\r\n  localStorage.setItem(key, data);\r\n  return data;\r\n}\r\n\r\nfunction splitUrl(URL){\r\n  var y= URL.split('/');\r\n  console.log(y);\r\n  return y[y.length-2];\r\n}\r\n\r\n\r\n\r\nexport function getAllStarwarsValue(URL) {\r\n    let dataVal = [];\r\n    // first page\r\n    return axios(URL)\r\n        .then(response => {\r\n            // collect dataVal from first page\r\n            dataVal = response.data.results;\r\n            return response.data.count;\r\n        })\r\n        .then(count => {\r\n            // exclude the first request\r\n            const numberOfPagesLeft = Math.ceil((count - 1) / 10);\r\n            let promises = [];\r\n            // start at 2 as you already queried the first page\r\n            for (let i = 2; i <= numberOfPagesLeft; i++) {\r\n                promises.push(axios(`${URL}?page=${i}`));\r\n            }\r\n            return Promise.all(promises);\r\n        })\r\n        .then(response => {\r\n            //get the rest records - pages 2 through n.\r\n            dataVal = response.reduce((acc, data) => [...acc, ...data.data.results], dataVal);\r\n            console.log(dataVal, 'dataVal');\r\n            let key = splitUrl(URL);\r\n            console.log(key);\r\n            localStorage.setItem(key, JSON.stringify(dataVal));\r\n            return dataVal;\r\n        })\r\n        .catch(error => console.log(\"Properly handle your exception here\"));\r\n}\r\n","\r\nimport { createBrowserHistory as history} from 'history';\r\n\r\nexport default history();\r\n","import React, {\r\n  Component\r\n} from \"react\";\r\n\r\nimport {getAllStarwarsValue} from '../utility/utility';\r\nimport history from '../../history';\r\nconst URL = \"http://swapi.dev/api/planets/\";\r\n\r\nclass Login extends Component {\r\nlogin = (e) =>{\r\n  const {uname, pwd} = this.state;\r\n  getAllStarwarsValue(URL);\r\n  let people = JSON.parse(localStorage.getItem('people'));\r\n  people.some((currVal) => {\r\n     if(uname === currVal.name && pwd === currVal.birth_year ){\r\n        this.redirectToSearch();\r\n      }\r\n  })\r\n}\r\n\r\nredirectToSearch = () => {\r\n  history.push('/Search');\r\n}\r\n\r\nchange =(e) => {\r\n  this.setState({\r\n    [e.target.name] : e.target.value\r\n  })\r\n}\r\n\r\n  render() {\r\n    return (\r\n          <>\r\n      <div className=\"sidenav\">\r\n         <div className=\"login-main-text\">\r\n            <h2>Application<br /> Login Page</h2>\r\n            <p>Login or register from here to access.</p>\r\n         </div>\r\n      </div>\r\n      <div className=\"main\">\r\n         <div className=\"col-md-6 col-sm-12\">\r\n            <div className=\"login-form\">\r\n               <form>\r\n                  <div className=\"form-group\">\r\n                     <label>User Name</label>\r\n                     <input type=\"text\" className=\"form-control\" name=\"uname\" placeholder=\"User Name\" onChange={(e) => this.change(e)}/>\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                     <label>Password</label>\r\n                     <input type=\"password\" className=\"form-control\" name=\"pwd\" placeholder=\"Password\" onChange={(e) => this.change(e)}/>\r\n                  </div>\r\n                  <button type=\"submit\" className=\"btn btn-black mr-2\" onClick={this.login}>Login</button>\r\n               </form>\r\n            </div>\r\n         </div>\r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Login;\r\n","import Login from './Login';\r\nexport default Login;\r\n","import Search from './Search';\r\nexport default Search;\r\n","import React, {\r\n  Component\r\n} from \"react\";\r\n\r\nimport {getAllStarwarsValue} from '../utility/utility';\r\nimport history from '../../history';\r\n\r\nconst URL = \"http://swapi.dev/api/planets/\";\r\n\r\n\r\nclass Search extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state ={\r\n      allPlanet:[],\r\n      details:''\r\n    }\r\n  }\r\n\r\n\r\nsearch = () =>{\r\n  const {search} = this.state;\r\n  console.log(URL, 'url')\r\n  if(search) {\r\n    getAllStarwarsValue(URL);\r\n    let planets = JSON.parse(localStorage.getItem('planets'));\r\n    let str1 = search;\r\n    let re = new RegExp(str1, \"g\");\r\n    let allSearch = planets.filter((planet, index) => planet.name.match(re) && planet);\r\n    this.setState({\r\n      allPlanet: allSearch\r\n    })\r\n  } else {\r\n    this.setState({\r\n      allPlanet: []\r\n    })\r\n  }\r\n\r\n}\r\n\r\nchange =(e) => {\r\n  this.setState({\r\n    [e.target.name] : e.target.value\r\n  }, () => {\r\n    this.search();\r\n  })\r\n}\r\n\r\ngetDetail = (planet) => {\r\n  // let html = '';\r\n  //  for(item in detailItem){\r\n  //     html = <li><span>{item}:</span><span>detailItem[item]</span></li>\r\n  //   }\r\n  //   return html;\r\n  console.log(planet, 'planet');\r\n  this.renderDes(planet)\r\n}\r\n\r\nrenderDes = (detailItem) => {\r\n  let html = '';\r\n   for(let item in detailItem){\r\n      html = html+`<li class=\"list-group-item\"><span class=\"badge badge-primary badge-pill\">${item}:</span><span style=\"word-break: break-all;\"> ${detailItem[item]}</span></li>`;\r\n    }\r\n    console.log(html, 'html');\r\n    this.setState({\r\n      details: html,\r\n      allPlanet: []\r\n    });\r\n\r\n\r\n}\r\n\r\n  render() {\r\n    const {allPlanet, details} = this.state;\r\n    return (\r\n      <>\r\n      <form style={{textAlign: \"end\"}}>\r\n<button type=\"submit\" className=\"btn btn-black mr-2\" onClick={() => history.push('/')}>Logout</button>\r\n      </form>\r\n\r\n        <div className=\"main\">\r\n          <div className=\"col-md-6 col-sm-12\">\r\n              <div className=\"login-form\">\r\n                <div className=\"form-group mb-0\">\r\n                    <input type=\"text\" className=\"form-control\" name=\"search\" placeholder=\"Search ... \" onChange={(e) => this.change(e)}/>\r\n                </div>\r\n                <div className=\"dropdown\" >\r\n                <div id=\"myDropdown\" className=\"dropdown-content\">\r\n                  {\r\n                    allPlanet.length > 0 && allPlanet.map((planet, index) => {\r\n                        return (\r\n                          <a href=\"#about\" style={\r\n                            { fontWeight: parseInt(planet.population)>1000000 ? 600 : 100 }}\r\n                            key={index} onClick={() => this.getDetail(planet)}> {planet.name}\r\n                          </a>\r\n                        )\r\n                      })\r\n                  }\r\n\r\n                </div>\r\n                <div style={{margin: \"10px\"}}>\r\n                  <h3>Planet detail:</h3>\r\n                  <ul className=\"list-group\" dangerouslySetInnerHTML={{__html: details}}></ul>\r\n                </div>\r\n\r\n                </div>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\nimport './App.css';\nimport Login from './Component/Login';\nimport Search from './Component/Search';\nimport { BrowserRouter as Router,Switch, Route } from 'react-router-dom';\nimport history from './history';\n\nfunction App() {\n  return (\n    <Router history={history}>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/my-app\" exact component={Login} />\n          <Route path=\"/my-app/Search\" component={Search} />\n      </Switch>\n      </div>\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}